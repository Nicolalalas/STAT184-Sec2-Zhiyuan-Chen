library(readxl)
library(dplyr)
data <- read_excel("/path_to_your_file/US Armed Forces (6_2024) (1).xlsx", skip = 2)
library(googlesheets4)
library(dplyr)
gs4_deauth()
data <- read_sheet("https://docs.google.com/spreadsheets/d/1cn4i0-ymB1ZytWXCwsJiq6fZ9PhGLUvbMBHlzqG4bwo/edit?gid=597536282")
colnames(data) <- c(
'Pay_Grade', 'Army_Male', 'Army_Female', 'Army_Total',
'Navy_Male', 'Navy_Female', 'Navy_Total',
'Marine_Male', 'Marine_Female', 'Marine_Total',
'Air_Force_Male', 'Air_Force_Female', 'Air_Force_Total',
'Space_Force_Male', 'Space_Force_Female', 'Space_Force_Total',
'Total_Male', 'Total_Female', 'Overall_Total'
)
data <- data %>% filter(!is.na(Pay_Grade))
data <- data %>% mutate(across(everything(), as.numeric))
library(googlesheets4)
library(dplyr)
gs4_deauth()
data <- read_sheet("https://docs.google.com/spreadsheets/d/1cn4i0-ymB1ZytWXCwsJiq6fZ9PhGLUvbMBHlzqG4bwo/edit?gid=597536282")
colnames(data) <- c(
'Pay_Grade', 'Army_Male', 'Army_Female', 'Army_Total',
'Navy_Male', 'Navy_Female', 'Navy_Total',
'Marine_Male', 'Marine_Female', 'Marine_Total',
'Air_Force_Male', 'Air_Force_Female', 'Air_Force_Total',
'Space_Force_Male', 'Space_Force_Female', 'Space_Force_Total',
'Total_Male', 'Total_Female', 'Overall_Total'
)
data <- data %>% filter(!is.na(Pay_Grade))
data <- data %>% mutate(across(everything(), ~ suppressWarnings(as.numeric(unlist(.)))))
rlang::last_trace()
library(googlesheets4)
library(dplyr)
gs4_deauth()
data <- read_sheet("https://docs.google.com/spreadsheets/d/1cn4i0-ymB1ZytWXCwsJiq6fZ9PhGLUvbMBHlzqG4bwo/edit?gid=597536282")
colnames(data) <- c(
'Pay_Grade', 'Army_Male', 'Army_Female', 'Army_Total',
'Navy_Male', 'Navy_Female', 'Navy_Total',
'Marine_Male', 'Marine_Female', 'Marine_Total',
'Air_Force_Male', 'Air_Force_Female', 'Air_Force_Total',
'Space_Force_Male', 'Space_Force_Female', 'Space_Force_Total',
'Total_Male', 'Total_Female', 'Overall_Total'
)
data <- data %>% filter(!is.na(Pay_Grade))
# Apply numeric conversion only to columns that are not already numeric
data <- data %>% mutate(across(where(~ is.character(.) | is.list(.)), ~ as.numeric(as.character(.))))
create_frequency_table <- function(data, gender_prefix) {
gender_cols <- grep(paste0(gender_prefix, "_"), names(data), value = TRUE)
df_gender <- data %>% select(Pay_Grade, all_of(gender_cols))
colnames(df_gender) <- gsub(paste0(gender_prefix, "_"), "", colnames(df_gender))
abs_freq <- df_gender %>%
column_to_rownames(var = "Pay_Grade") %>%
mutate(Total = rowSums(., na.rm = TRUE)) %>%
bind_rows(Total = colSums(., na.rm = TRUE))
total_sum <- abs_freq["Total", "Total"]
rel_freq <- abs_freq / total_sum * 100
rel_freq <- round(rel_freq, 2)
list(abs_freq = abs_freq, rel_freq = rel_freq)
}
male_tables <- create_frequency_table(data, "Male")
library(googlesheets4)
library(dplyr)
gs4_deauth()
data <- read_sheet("https://docs.google.com/spreadsheets/d/1cn4i0-ymB1ZytWXCwsJiq6fZ9PhGLUvbMBHlzqG4bwo/edit?gid=597536282")
colnames(data) <- c(
'Pay_Grade', 'Army_Male', 'Army_Female', 'Army_Total',
'Navy_Male', 'Navy_Female', 'Navy_Total',
'Marine_Male', 'Marine_Female', 'Marine_Total',
'Air_Force_Male', 'Air_Force_Female', 'Air_Force_Total',
'Space_Force_Male', 'Space_Force_Female', 'Space_Force_Total',
'Total_Male', 'Total_Female', 'Overall_Total'
)
data <- data %>% filter(!is.na(Pay_Grade))
# Apply numeric conversion only to columns that are not already numeric
data <- data %>% mutate(across(where(~ is.character(.) | is.list(.)), ~ as.numeric(as.character(.))))
create_frequency_table <- function(data, gender_prefix) {
gender_cols <- grep(paste0(gender_prefix, "_"), names(data), value = TRUE)
df_gender <- data %>% select(Pay_Grade, all_of(gender_cols))
colnames(df_gender) <- gsub(paste0(gender_prefix, "_"), "", colnames(df_gender))
abs_freq <- df_gender %>%
column_to_rownames(var = "Pay_Grade") %>%
mutate(Total = rowSums(., na.rm = TRUE)) %>%
bind_rows(Total = colSums(., na.rm = TRUE))
total_sum <- abs_freq["Total", "Total"]
rel_freq <- abs_freq / total_sum * 100
rel_freq <- round(rel_freq, 2)
list(abs_freq = abs_freq, rel_freq = rel_freq)
}
male_tables <- create_frequency_table(data, "Male")
female_tables <- create_frequency_table(data, "Female")
library(googlesheets4)
library(dplyr)
gs4_deauth()
data <- read_sheet("https://docs.google.com/spreadsheets/d/1cn4i0-ymB1ZytWXCwsJiq6fZ9PhGLUvbMBHlzqG4bwo/edit?gid=597536282")
colnames(data) <- c(
'Pay_Grade', 'Army_Male', 'Army_Female', 'Army_Total',
'Navy_Male', 'Navy_Female', 'Navy_Total',
'Marine_Male', 'Marine_Female', 'Marine_Total',
'Air_Force_Male', 'Air_Force_Female', 'Air_Force_Total',
'Space_Force_Male', 'Space_Force_Female', 'Space_Force_Total',
'Total_Male', 'Total_Female', 'Overall_Total'
)
data <- data %>% filter(!is.na(Pay_Grade))
data <- data %>% mutate(across(where(~ is.character(.) | is.list(.)), ~ as.numeric(as.character(.))))
create_frequency_table <- function(data, gender_prefix) {
gender_cols <- grep(paste0(gender_prefix, "_"), names(data), value = TRUE)
df_gender <- data %>% select(Pay_Grade, all_of(gender_cols))
colnames(df_gender) <- gsub(paste0(gender_prefix, "_"), "", colnames(df_gender))
# Set 'Pay_Grade' as rownames
abs_freq <- df_gender
rownames(abs_freq) <- abs_freq$Pay_Grade
abs_freq$Pay_Grade <- NULL
abs_freq <- abs_freq %>%
mutate(Total = rowSums(., na.rm = TRUE)) %>%
bind_rows(Total = colSums(., na.rm = TRUE))
total_sum <- abs_freq["Total", "Total"]
rel_freq <- abs_freq / total_sum * 100
rel_freq <- round(rel_freq, 2)
list(abs_freq = abs_freq, rel_freq = rel_freq)
}
male_tables <- create_frequency_table(data, "Male")
female_tables <- create_frequency_table(data, "Female")
library(googlesheets4)
library(dplyr)
gs4_deauth()
data <- read_sheet("https://docs.google.com/spreadsheets/d/1cn4i0-ymB1ZytWXCwsJiq6fZ9PhGLUvbMBHlzqG4bwo/edit?gid=597536282")
colnames(data) <- c(
'Pay_Grade', 'Army_Male', 'Army_Female', 'Army_Total',
'Navy_Male', 'Navy_Female', 'Navy_Total',
'Marine_Male', 'Marine_Female', 'Marine_Total',
'Air_Force_Male', 'Air_Force_Female', 'Air_Force_Total',
'Space_Force_Male', 'Space_Force_Female', 'Space_Force_Total',
'Total_Male', 'Total_Female', 'Overall_Total'
)
data <- data %>% filter(!is.na(Pay_Grade))
data <- data %>% mutate(across(where(~ is.character(.) | is.list(.)), ~ as.numeric(as.character(.))))
create_frequency_table <- function(data, gender_prefix) {
gender_cols <- grep(paste0(gender_prefix, "_"), names(data), value = TRUE)
df_gender <- data %>% select(Pay_Grade, all_of(gender_cols))
colnames(df_gender) <- gsub(paste0(gender_prefix, "_"), "", colnames(df_gender))
# Calculate absolute frequencies and add total row/column
abs_freq <- df_gender %>%
mutate(Total = rowSums(select(., -Pay_Grade), na.rm = TRUE)) %>%
bind_rows(summarise_all(., ~sum(. ,na.rm = TRUE))) %>%
mutate(Pay_Grade = replace(Pay_Grade, n(), "Total"))
# Calculate relative frequencies as percentages
total_sum <- abs_freq %>% filter(Pay_Grade == "Total") %>% pull(Total)
rel_freq <- abs_freq %>%
mutate(across(where(is.numeric), ~ round(. / total_sum * 100, 2)))
list(abs_freq = abs_freq, rel_freq = rel_freq)
}
male_tables <- create_frequency_table(data, "Male")
female_tables <- create_frequency_table(data, "Female")
abs_freq_male <- male_tables$abs_freq
rel_freq_male <- male_tables$rel_freq
abs_freq_female <- female_tables$abs_freq
rel_freq_female <- female_tables$rel_freq
library(googlesheets4)
library(dplyr)
gs4_deauth()
data <- read_sheet("https://docs.google.com/spreadsheets/d/1cn4i0-ymB1ZytWXCwsJiq6fZ9PhGLUvbMBHlzqG4bwo/edit?gid=597536282")
colnames(data) <- c(
'Pay_Grade', 'Army_Male', 'Army_Female', 'Army_Total',
'Navy_Male', 'Navy_Female', 'Navy_Total',
'Marine_Male', 'Marine_Female', 'Marine_Total',
'Air_Force_Male', 'Air_Force_Female', 'Air_Force_Total',
'Space_Force_Male', 'Space_Force_Female', 'Space_Force_Total',
'Total_Male', 'Total_Female', 'Overall_Total'
)
data <- data %>% filter(!is.na(Pay_Grade))
# Attempt conversion, report NA warnings, and inspect if necessary
data <- data %>% mutate(across(where(~ is.character(.) | is.list(.)), ~ as.numeric(as.character(.))))
# Inspect columns with newly introduced NA values
na_summary <- sapply(data, function(x) sum(is.na(x)))
print(na_summary)
# Function to create frequency tables
create_frequency_table <- function(data, gender_prefix) {
gender_cols <- grep(paste0(gender_prefix, "_"), names(data), value = TRUE)
df_gender <- data %>% select(Pay_Grade, all_of(gender_cols))
colnames(df_gender) <- gsub(paste0(gender_prefix, "_"), "", colnames(df_gender))
# Calculate absolute frequencies and add total row/column
abs_freq <- df_gender %>%
mutate(Total = rowSums(select(., -Pay_Grade), na.rm = TRUE)) %>%
bind_rows(summarise_all(., ~sum(. ,na.rm = TRUE))) %>%
mutate(Pay_Grade = replace(Pay_Grade, n(), "Total"))
# Calculate relative frequencies as percentages
total_sum <- abs_freq %>% filter(Pay_Grade == "Total") %>% pull(Total)
rel_freq <- abs_freq %>%
mutate(across(where(is.numeric), ~ round(. / total_sum * 100, 2)))
list(abs_freq = abs_freq, rel_freq = rel_freq)
}
male_tables <- create_frequency_table(data, "Male")
female_tables <- create_frequency_table(data, "Female")
abs_freq_male <- male_tables$abs_freq
rel_freq_male <- male_tables$rel_freq
abs_freq_female <- female_tables$abs_freq
rel_freq_female <- female_tables$rel_freq
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Load the diamonds dataset from ggplot2
data("diamonds")
# Create a summary table for Width (y) by cut
summary_table <- diamonds %>%
group_by(cut) %>%
summarize(
Count = n(),
Min = min(y, na.rm = TRUE),
`1st Quin-tile` = quantile(y, 0.2, na.rm = TRUE),
`2nd Quin-tile` = quantile(y, 0.4, na.rm = TRUE),
Median = median(y, na.rm = TRUE),
`3rd Quin-tile` = quantile(y, 0.6, na.rm = TRUE),
`4th Quin-tile` = quantile(y, 0.8, na.rm = TRUE),
Max = max(y, na.rm = TRUE),
Mean = round(mean(y, na.rm = TRUE), 2),
`Std Dev` = round(sd(y, na.rm = TRUE), 2)
)
# Display the summary table
print(summary_table)
install.packages("palmerpenguins")
library(palmerpenguins)
View(penguins)
# Load necessary libraries
library(dplyr)
library(palmerpenguins)
# Filter for Adelie penguins and remove rows with missing data
adelie_penguins <- penguins %>%
filter(species == "Adelie") %>%
na.omit()
# Fit the linear regression model
penguinModel <- lm(
formula = body_mass_g ~ bill_length_mm + bill_depth_mm + flipper_length_mm + sex + island,
data = adelie_penguins
)
# Extract the summary of the model and convert coefficients to a tidy data frame
summary_table <- summary(penguinModel)$coefficients %>%
as.data.frame() %>%
mutate(across(everything(), ~ round(., 2))) %>%
rename(
Estimate = `Estimate`,
`Std. Error` = `Std. Error`,
`t-value` = `t value`,
`p-value` = `Pr(>|t|)`
)
# Display the summary table
print(summary_table)
library(ggplot2)
data(diamonds)
library(ggplot2)
data(diamonds)
library(ggplot2)
data(diamonds)
library(ggplot2)
data(diamonds)
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 500, fill = "skyblue", color = "black") +
labs(title = "Distribution of Diamond Prices", x = "Price (USD)", y = "Frequency") +
theme_minimal()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(alpha = 0.3, color = "blue") +
geom_smooth(method = "lm", color = "red") +
labs(title = "Relationship Between Carat and Price", x = "Carat", y = "Price (USD)") +
theme_minimal()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Price Distribution by Cut", x = "Cut", y = "Price (USD)") +
theme_minimal()
ggplot(diamonds, aes(x = color, y = price)) +
geom_boxplot(fill = "lightcoral") +
labs(title = "Price Distribution by Color", x = "Color", y = "Price (USD)") +
theme_minimal()
ggplot(diamonds, aes(x = clarity, y = price)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Price Distribution by Clarity", x = "Clarity", y = "Price (USD)") +
theme_minimal()
library(ggplot2)
data(diamonds)
ggplot(diamonds, aes(x = price)) +
geom_histogram(binwidth = 500, fill = "skyblue", color = "black") +
labs(
title = "Distribution of Diamond Prices",
subtitle = "Analyzing the spread and skewness of diamond prices in the market",
x = "Price (USD)",
y = "Number of Diamonds"
) +
theme_minimal()
ggplot(diamonds, aes(x = carat, y = price)) +
geom_point(alpha = 0.3, color = "blue") +
geom_smooth(method = "lm", color = "red") +
labs(
title = "Relationship Between Diamond Carat Size and Price",
subtitle = "Exploring how the size of a diamond impacts its market price",
x = "Carat Size",
y = "Price (USD)"
) +
theme_minimal()
ggplot(diamonds, aes(x = cut, y = price)) +
geom_boxplot(fill = "lightgreen") +
labs(
title = "Price Variation by Diamond Cut Quality",
subtitle = "Examining how different cut qualities affect diamond pricing",
x = "Cut Quality",
y = "Price (USD)"
) +
theme_minimal()
ggplot(diamonds, aes(x = color, y = price)) +
geom_boxplot(fill = "lightcoral") +
labs(
title = "Price Distribution Across Diamond Color Grades",
subtitle = "Assessing the influence of color grade on diamond prices",
x = "Color Grade",
y = "Price (USD)"
) +
theme_minimal()
ggplot(diamonds, aes(x = clarity, y = price)) +
geom_boxplot(fill = "lightblue") +
labs(
title = "Price Variation by Diamond Clarity",
subtitle = "Understanding the impact of clarity on diamond prices",
x = "Clarity Grade",
y = "Price (USD)"
) +
theme_minimal()
install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
ggplot(penguins, aes(x = species)) +
geom_bar(aes(fill = island), position = "dodge") +
labs(title = "Penguin Species Distribution by Island", x = "Species", y = "Count") +
theme_minimal()
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Body Mass by Penguin Species", x = "Species", y = "Body Mass (g)") +
theme_minimal()
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
geom_point(alpha = 0.6) +
labs(title = "Bill Length vs. Bill Depth by Species", x = "Bill Length (mm)", y = "Bill Depth (mm)") +
theme_minimal()
ggplot(penguins, aes(x = sex, y = body_mass_g)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(title = "Body Mass by Sex and Species", x = "Sex", y = "Body Mass (g)") +
theme_minimal()
ggplot(penguins, aes(x = sex, y = bill_length_mm)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(title = "Bill Length by Sex and Species", x = "Sex", y = "Bill Length (mm)") +
theme_minimal()
ggplot(penguins, aes(x = sex, y = flipper_length_mm)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(title = "Flipper Length by Sex and Species", x = "Sex", y = "Flipper Length (mm)") +
theme_minimal()
# Load necessary libraries and data
install.packages("palmerpenguins")
library(palmerpenguins)
library(ggplot2)
# 1. Species Distribution by Island
# This bar chart shows the distribution of each penguin species across different islands.
ggplot(penguins, aes(x = species)) +
geom_bar(aes(fill = island), position = "dodge") +
labs(
title = "Distribution of Penguin Species by Island",
subtitle = "Comparing the count of each species across Biscoe, Dream, and Torgersen Islands",
x = "Penguin Species",
y = "Number of Penguins",
fill = "Island"
) +
theme_minimal()
# 2. Body Mass by Species
# This box plot shows the body mass range for each species to highlight size differences.
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot(fill = "lightblue") +
labs(
title = "Body Mass Distribution by Penguin Species",
subtitle = "Exploring body mass variation across different penguin species",
x = "Penguin Species",
y = "Body Mass (grams)"
) +
theme_minimal()
# 3. Bill Length vs. Bill Depth by Species
# Scatter plot showing the relationship between bill length and bill depth for each species.
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
geom_point(alpha = 0.6) +
labs(
title = "Bill Length vs. Bill Depth for Different Penguin Species",
subtitle = "Examining unique bill characteristics among species",
x = "Bill Length (mm)",
y = "Bill Depth (mm)",
color = "Species"
) +
theme_minimal()
# 4. Body Mass by Sex within Each Species
# Side-by-side box plot to compare body mass differences between male and female penguins by species.
ggplot(penguins, aes(x = sex, y = body_mass_g)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(
title = "Body Mass Comparison by Sex within Each Penguin Species",
subtitle = "Observing potential size differences between male and female penguins",
x = "Sex",
y = "Body Mass (grams)",
fill = "Species"
) +
theme_minimal()
# 5. Bill Length by Sex within Each Species
# Side-by-side box plot to compare bill length between male and female penguins by species.
ggplot(penguins, aes(x = sex, y = bill_length_mm)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(
title = "Bill Length Comparison by Sex within Each Penguin Species",
subtitle = "Exploring bill length differences between male and female penguins",
x = "Sex",
y = "Bill Length (mm)",
fill = "Species"
) +
theme_minimal()
# 6. Flipper Length by Sex within Each Species
# Side-by-side box plot to compare flipper length between male and female penguins by species.
ggplot(penguins, aes(x = sex, y = flipper_length_mm)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(
title = "Flipper Length Comparison by Sex within Each Penguin Species",
subtitle = "Investigating flipper length variation between sexes within species",
x = "Sex",
y = "Flipper Length (mm)",
fill = "Species"
) +
theme_minimal()
library(palmerpenguins)
library(ggplot2)
# 1. Species Distribution by Island
# This bar chart shows the distribution of each penguin species across different islands.
ggplot(penguins, aes(x = species)) +
geom_bar(aes(fill = island), position = "dodge") +
labs(
title = "Distribution of Penguin Species by Island",
subtitle = "Comparing the count of each species across Biscoe, Dream, and Torgersen Islands",
x = "Penguin Species",
y = "Number of Penguins",
fill = "Island"
) +
theme_minimal()
# 2. Body Mass by Species
# This box plot shows the body mass range for each species to highlight size differences.
ggplot(penguins, aes(x = species, y = body_mass_g)) +
geom_boxplot(fill = "lightblue") +
labs(
title = "Body Mass Distribution by Penguin Species",
subtitle = "Exploring body mass variation across different penguin species",
x = "Penguin Species",
y = "Body Mass (grams)"
) +
theme_minimal()
# 3. Bill Length vs. Bill Depth by Species
# Scatter plot showing the relationship between bill length and bill depth for each species.
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, color = species)) +
geom_point(alpha = 0.6) +
labs(
title = "Bill Length vs. Bill Depth for Different Penguin Species",
subtitle = "Examining unique bill characteristics among species",
x = "Bill Length (mm)",
y = "Bill Depth (mm)",
color = "Species"
) +
theme_minimal()
# 4. Body Mass by Sex within Each Species
# Side-by-side box plot to compare body mass differences between male and female penguins by species.
ggplot(penguins, aes(x = sex, y = body_mass_g)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(
title = "Body Mass Comparison by Sex within Each Penguin Species",
subtitle = "Observing potential size differences between male and female penguins",
x = "Sex",
y = "Body Mass (grams)",
fill = "Species"
) +
theme_minimal()
# 5. Bill Length by Sex within Each Species
# Side-by-side box plot to compare bill length between male and female penguins by species.
ggplot(penguins, aes(x = sex, y = bill_length_mm)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(
title = "Bill Length Comparison by Sex within Each Penguin Species",
subtitle = "Exploring bill length differences between male and female penguins",
x = "Sex",
y = "Bill Length (mm)",
fill = "Species"
) +
theme_minimal()
# 6. Flipper Length by Sex within Each Species
# Side-by-side box plot to compare flipper length between male and female penguins by species.
ggplot(penguins, aes(x = sex, y = flipper_length_mm)) +
geom_boxplot(aes(fill = species)) +
facet_wrap(~species) +
labs(
title = "Flipper Length Comparison by Sex within Each Penguin Species",
subtitle = "Investigating flipper length variation between sexes within species",
x = "Sex",
y = "Flipper Length (mm)",
fill = "Species"
) +
theme_minimal()
savehistory("C:/Users/54768/OneDrive/桌面/study/123.Rhistory")
savehistory("~/GitHub/STAT184-Sec2-Zhiyuan-Chen/123.Rhistory")
